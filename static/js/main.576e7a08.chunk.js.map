{"version":3,"sources":["Messages.js","firebase.js","App.js","serviceWorker.js","index.js"],"names":["Messages","forwardRef","ref","message","isUser","username","className","Card","CardContent","Typography","color","variant","component","db","firebase","initializeApp","apiKey","authDomain","databaseURL","projectId","storageBucket","messagingSenderId","appId","measurementId","firestore","App","useState","input","setInput","messages","setMessages","setUsername","useEffect","collection","orderBy","onSnapshot","snapshot","docs","map","doc","id","data","console","log","prompt","FormControl","InputLabel","Input","placeholder","value","onChange","event","target","Button","disabled","type","onClick","add","timeStamp","FieldValue","serverTimestamp","key","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error"],"mappings":"0WA2BeA,G,MApBEC,sBAAW,WAAwBC,GAAU,IAA/BC,EAA8B,EAA9BA,QACrBC,EADmD,EAArBC,WACRF,EAAQE,SAEpC,OACI,yBAAKH,IAAKA,EAAKI,UAAS,kBAAaF,GAAU,kBAC3C,kBAACG,EAAA,EAAD,CAAMD,UAAYF,EAAQ,oBAAsB,sBAC5C,kBAACI,EAAA,EAAD,KACI,kBAACC,EAAA,EAAD,CACIC,MAAM,QACNC,QAAQ,KACRC,UAAU,OAERR,GAAD,UAAcD,EAAQE,UAAR,gCAAd,MALL,IAK8DF,EAAQA,gB,iBCJ3EU,EAbKC,IAASC,cAAc,CACzCC,OAAQ,0CACRC,WAAY,2CACZC,YAAa,kDACbC,UAAW,2BACXC,cAAe,uCACfC,kBAAmB,aACnBC,MAAO,0CACPC,cAAe,iBAGMC,Y,QCkDRC,MAvDf,WAAgB,IAAD,EACeC,mBAAS,IADxB,mBACJC,EADI,KACGC,EADH,OAEqBF,mBAAS,IAF9B,mBAEJG,EAFI,KAEMC,EAFN,OAGqBJ,mBAAS,IAH9B,mBAGJrB,EAHI,KAGM0B,EAHN,KAgCX,OA3BAC,qBAAU,WACNnB,EAAGoB,WAAW,YACTC,QAAQ,YAAa,QACrBC,YAAW,SAAAC,GACRN,EAAYM,EAASC,KAAKC,KAAI,SAAAC,GAAG,MAAK,CAACC,GAAID,EAAIC,GAAIrC,QAASoC,EAAIE,YAChEC,QAAQC,IAAIP,QAErB,IAEHJ,qBAAU,WAEND,EAAYa,OAAO,8BACpB,IAgBC,yBAAKtC,UAAU,OACX,qCAAWD,GACX,0BAAMC,UAAU,aACZ,kBAACuC,EAAA,EAAD,CAAavC,UAAU,oBACnB,kBAACwC,EAAA,EAAD,gBACA,kBAACC,EAAA,EAAD,CAAOC,YAAY,sBAAsBC,MAAOtB,EAAOuB,SAAU,SAAAC,GAAK,OAAIvB,EAASuB,EAAMC,OAAOH,WAEpG,kBAACI,EAAA,EAAD,CAAQC,UAAW3B,EAAOhB,QAAQ,YAAYD,MAAM,UAAU6C,KAAK,SAASC,QApBpE,SAACL,GAEjBtC,EAAGoB,WAAW,YAAYwB,IAAI,CAC1BtD,QAASwB,EACTtB,SAAUA,EACVqD,UAAW5C,IAASU,UAAUmC,WAAWC,oBAG7ChC,EAAS,MAYD,iBAEJ,kBAAC,IAAD,KAEQC,EAASS,KAAI,gBAAEnC,EAAF,EAAEA,QAASqC,EAAX,EAAWA,GAAX,OACT,kBAAC,EAAD,CAAUqB,IAAKrB,EAAInC,SAAUA,EAAUF,QAASA,UCzCpD2D,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDyHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLrC,QAAQqC,MAAMA,EAAM5E,c","file":"static/js/main.576e7a08.chunk.js","sourcesContent":["\nimport React, { forwardRef} from 'react';\nimport Card from '@material-ui/core/Card';\nimport CardContent from '@material-ui/core/CardContent';\nimport Typography from '@material-ui/core/Typography';\nimport './Message.css'\n\nconst Messages = forwardRef(({ message, username }, ref)  => {\n    const isUser = username === message.username\n\n    return (\n        <div ref={ref} className={`message ${isUser && 'message__user'}`} >\n            <Card className={ isUser? 'message__userCard' : 'message__guestCard'}>\n                <CardContent>\n                    <Typography\n                        color=\"white\"\n                        variant='h5'\n                        component='h2'\n                    >\n                        {!isUser && `${message.username || `1 Thằng lạ mặt`} :`} {message.message}\n                    </Typography>\n                </CardContent>\n            </Card>\n        </div>\n    )\n})\n\nexport default Messages\n","import firebase from 'firebase'\n\nconst firebaseApp = firebase.initializeApp({\n  apiKey: \"AIzaSyCqpnPc0HBQY8n_6gzQGssbxggKUReThQg\",\n  authDomain: \"fb-messenger-clone-4a10d.firebaseapp.com\",\n  databaseURL: \"https://fb-messenger-clone-4a10d.firebaseio.com\",\n  projectId: \"fb-messenger-clone-4a10d\",\n  storageBucket: \"fb-messenger-clone-4a10d.appspot.com\",\n  messagingSenderId: \"6821281704\",\n  appId: \"1:6821281704:web:1913089f4fa4caf973679d\",\n  measurementId: \"G-CLY247ZNS4\"\n});\n\nconst db = firebaseApp.firestore()\n\nexport default db","import React, { useState, useEffect } from 'react';\nimport './App.css';\nimport { Button, FormControl, InputLabel, Input } from '@material-ui/core'\nimport Messages from './Messages';\nimport db from './firebase';\nimport firebase from 'firebase'\nimport FlipMove from 'react-flip-move'\n\nfunction App() {\n    const [input, setInput] = useState('')\n    const [messages, setMessages] = useState([])\n    const [username, setUsername] = useState('')\n\n    useEffect(() => {\n        db.collection('messages')\n            .orderBy('timeStamp', 'desc')\n            .onSnapshot(snapshot => {\n                setMessages(snapshot.docs.map(doc => ({id: doc.id, message: doc.data()})))\n                console.log(snapshot)\n            })\n    }, [])\n\n    useEffect(() => {\n        //if it blank inside [], this code run once when component loaded\n        setUsername(prompt('Please enter your name '))\n    }, [])\n\n\n    const sendMessage = (event) => {\n\n        db.collection('messages').add({\n            message: input,\n            username: username,\n            timeStamp: firebase.firestore.FieldValue.serverTimestamp()\n        })\n        //all the logic will send message goes\n        setInput('')\n    }\n\n\n    return (\n        <div className=\"App\">\n            <h1>Hello {username}</h1>\n            <form className='app__form' >\n                <FormControl className='app__formControl' >\n                    <InputLabel >message</InputLabel>\n                    <Input placeholder='Enter a message ...' value={input} onChange={event => setInput(event.target.value)} />\n                </FormControl>\n                <Button disabled={!input} variant='contained' color='primary' type='submit' onClick={sendMessage} >Send message</Button>\n            </form>\n            <FlipMove>\n                {\n                    messages.map(({message, id}) => (\n                        <Messages key={id} username={username} message={message} />\n                    )\n                    )\n                }\n            </FlipMove>\n\n        </div>\n    );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}